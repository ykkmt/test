var child_process = require("child_process");
//websocket待ち受け
var WebSocketServer = require('ws').Server
var wss = new WebSocketServer({
	host : '0.0.0.0',
	port : 8889
});
var opt = new Object();
opt.silent = true;
var fs = require('fs');

//セッション管理（仮）
var connections = [];

//websocket event
wss.on('connection', function(ws) {
	console.log("websocket open");
   	connections.push(ws);
	//console.log(connections); 
/*var julius = child_process.execFile('./dictation-kit-v4.3.1-linux/bin/julius', 
						['-C', 'dictation-kit-v4.3.1-linux/main.jconf', '-C', 'dictation-kit-v4.3.1-linux/am-gmm.jconf', '-demo', '-charconv', 'utf-8', 'euc-jp'], 
						function(error, stdout, stderr){
							console.log("test");
						}*/
/*var julius = child_process.execFile('./', 
						[], 
						function(error, stdout, stderr){
							console.log("test");
						}

);*/
/*julius.stdout.on('data', function (data) {
				console.log("send");
				ws.send(data);});
    ws.on('close', function () {
		//obj.clear(ws);
        connections = connections.filter(function (conn, i) {
            return (conn === ws) ? false : true;
        });
    });*/
var inpcm = fs.createWriteStream('in.pcm');
var outpcm = fs.createWriteStream('out.pcm');
		var child = child_process.fork("test.js",opt);
		child.stdout.on('data', function (data) {
			console.log("transform");
			outpcm.write(data);
			});
child.stdout.on('end', function (data) {
	console.log("end_server");	
});
child.stdout.on('error', function (data) {
	console.log("error");	
});

	ws.on('message', function(message) {
		console.log("received");
		//ws.send("ok");
inpcm.write(message);
		child.stdin.write(message);
		//julius.stdin.write(message);
	});
});

console.log("end");


